{"name":"CxxMock","tagline":"CxxMock - C++ mock objects for CxxTest","body":"[![Build Status](https://travis-ci.org/comm644/cxxmock.svg?branch=master)](https://travis-ci.org/comm644/cxxmock)\r\n\r\nAbout \r\n==================================\r\n\r\nThe CxxMock framework provides easy-to-use Mock objects for C++ unit-testing. I've tried to implement Rhino.Mocks idea. It works!\r\n\r\n\r\nQuick start\r\n===================================\r\n\r\n1. Generate mocks\r\n--------------------------\r\n\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n:::bash\r\npython cxxmockgen.py <header.h> <header.h>.... >generated_mocks.h\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n\r\n2. Use in unit-tests.\r\n--------------------------------\r\n\r\n~~~~~~~~~~~~~~~~~~~~~~\r\n:::C++\r\n#include \"generated_mocks.h\"\r\n...\r\n...\r\n... in test case:\r\n\r\n\r\n//Declare repository.\r\nCxxMock::Repository mocks;\r\n\r\n//Gets interface mock.\r\nIMyCoolInterface* mock = mocks.create<IMyCoolInterface>();\r\n\r\n//record expectations.\r\nTS_EXPECT_CALL( mock->method(10) ).returns( 5 );\r\n\r\n//or void:\r\nTS_EXPECT_CALL_VOID( mock->voidMethod() );\r\n\r\n//start replaying recorded calls.\r\nmocks.replay();\r\n\r\n//run subsystem wich used mock interfaces:\r\nTS_ASSERT_EQUALS( 5, mock->method(10) );\r\nmock->voidMethod();\r\n\r\n\r\n//verify not called methods.\r\nmocks.verify();\r\n~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n\r\n[Examples](docs/examples.md)\r\n","google":"UA-56991729-1","note":"Don't delete this file! It's used internally to help with page regeneration."}